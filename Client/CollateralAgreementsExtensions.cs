// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CollateralService.ApiClient.Client
{
    using CollateralService.ApiClient;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CollateralAgreements.
    /// </summary>
    public static partial class CollateralAgreementsExtensions
    {
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        public static IList<Models.Presentation.Responses.Collateral.Collateral> GetCollateralByCollateralAgreement(this ICollateralAgreements operations, string id)
        {
            return operations.GetCollateralByCollateralAgreementAsync(id).GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IList<Models.Presentation.Responses.Collateral.Collateral>> GetCollateralByCollateralAgreementAsync(this ICollateralAgreements operations, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.GetCollateralByCollateralAgreementWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        public static bool? IsExists(this ICollateralAgreements operations, string id)
        {
            return operations.IsExistsAsync(id).GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<bool?> IsExistsAsync(this ICollateralAgreements operations, string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.IsExistsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
